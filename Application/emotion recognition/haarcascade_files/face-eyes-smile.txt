FACE_CASCADE = cv2.CascadeClassifier(os.path.join(CURRENT_FILE_PATH, 'haarcascade_frontalface_default.xml'))
EYE_CASCADE = cv2.CascadeClassifier( os.path.join(CURRENT_FILE_PATH, 'haarcascade_eye.xml'))
SMILE_CASCADE = cv2.CascadeClassifier(os.path.join(CURRENT_FILE_PATH, 'haarcascade_smile.xml'))  
faces = FACE_CASCADE.detectMultiScale(bw_img, 1.3, 5)
    for fx, fy, fw, fh in faces:
        cv2.rectangle(orig_img, (fx, fy), (fx+fw, fy+fh), (255, 0, 0), 2)
        region_of_interest_bw = bw_img[fy:fy+fh, fx:fx+fw]
        region_of_interest_color = orig_img[fy:fy+fh, fx:fx+fw]
        eyes = EYE_CASCADE.detectMultiScale(region_of_interest_bw, 1.1, 22)
        for ex, ey, ew, eh in eyes:
            cv2.rectangle(region_of_interest_color, (ex, ey),
                          (ex+ew, ey+eh), (0, 255, 0), 2)
        smiles = SMILE_CASCADE.detectMultiScale(region_of_interest_bw, 1.7, 22)
        for sx, sy, sw, sh in smiles:
            cv2.rectangle(region_of_interest_color, (sx, sy),
                          (sx+sw, sy+sh), (0, 0, 255), 2)


face_cascade = cv2.CascadeClassifier(r'C:\Users\user\Desktop\LOGO\haarcascade_frontalface_default.xml')

eye_cascade = cv2.CascadeClassifier(r'C:\Users\user\Desktop\LOGO\haarcascade_eye.xml')
 for (x, y, w, h) in faces:
        cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
        roi_gray = gray[y:y + h, x:x + w]
        roi_color = img[y:y + h, x:x + w]

        eyes = eye_cascade.detectMultiScale(roi_gray)
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)

    cv2.imshow('img', img)